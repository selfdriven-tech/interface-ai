/*
	AI factory | OPENROUTER.AI
	USES OPENAI LIBRARY
	Default model: openai/gpt-oss-20b
	https://docs.openrouter.ai/

	Direct https request:

	curl https://openrouter.ai/api/v1/chat/completions \
		-H "Content-Type: application/json" \
		-H "Authorization: Bearer ..." \
		-d '{
		"messages": [
			{
			"role": "system",
			"content": "You are a test assistant."
			},
			{
			"role": "user",
			"content": "Testing. Just say hi and hello world and nothing else."
			}
		],
		"model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
		"stream": false,
		"temperature": 0
}'
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		entityos.add(
		{
			name: 'ai-gen-util-chat',
			code: function (param)
			{
				const settings = entityos.get({scope: '_settings'});
                let aiSettings = _.get(param, 'settings');

				let keyPath = _.get(aiSettings, 'service.keypath');

				let apiKey = _.get(settings, keyPath);
				
				const apiBaseURL = 'https://'
					+ _.get(aiSettings, 'service.host.name', 'openrouter.ai')
					+ _.get(aiSettings, 'service.host.basePath', '/api/v1');

                const OpenAI = require("openai");

                const openrouter = new OpenAI(
                {
                    apiKey: apiKey,
					baseURL: apiBaseURL
                });

				const maxTokensDefault = _.get(settings, 'ai.defaults.maxtokens', 1000);
				const temperatureDefault = _.get(settings, 'ai.defaults.temperature', 0.7);

				const maxTokens = _.get(param, 'maxTokens', maxTokensDefault);
				const temperature = _.get(param, 'temperature', temperatureDefault);

				let messages = _.get(param, 'messages', {});

				if (messages.system == undefined)
				{
					messages.system = _.get(aiSettings, 'ai.defaults.messages.system');
				}

				if (messages.user == undefined)
				{
					entityos.invoke('util-end', {error: 'No user messages!'});
				}
				else
				{
					let chatMessages =
					[
						{ role: 'system', content: messages.system }
					];

					const attachments = _.get(param, 'attachments');
					
					if (attachments != undefined)
					{
						_.each(attachments, function (attachment)
						{
							if (attachment.base64 != undefined)
							{
								chatMessages.push(
								{
									role: 'user',
									content:
									[
										{ type: 'text', text: messages.user},
										{
											type: 'image_url',
											image_url:
											{
												url: 'data:image/png;base64,' + attachment.base64
											}
										}
									]
								});
							}

							if (attachment.url != undefined)
							{
								chatMessages.push(
								{
									role: 'user',
									content:
									[
										{ type: 'text', text: messages.user},
										{
											type: 'image_url',
											image_url:
											{
												url: attachment.url
											}
										}
									]
								});
							}
						});
					}

					if (_.find(chatMessages, function (chatMessage) {return chatMessage.role == 'user'}) == undefined)
					{
						chatMessages.push({role: 'user', content: messages.user})
					}

					console.log(aiSettings.model.name)

					openrouter.chat.completions.create({
						model: aiSettings.model.name,
						messages: chatMessages,
						max_tokens: maxTokens,
						temperature: temperature
					})
					.then(function (completion)
					{
						//console.log(completion.choices[0]?.message?.content)
						_.set(param, 'messages.response', completion.choices[0]?.message?.content);

						if (_.get(param, 'onComplete') != undefined)
						{
							entityos._util.onComplete(param);
						}
						else
						{
							entityos.invoke('util-end', param);
						}
					})
					.catch(function (responseError)
					{
						//console.log(responseError)
						_.set(param, 'messages.response',  '!!: ' + _.get(responseError, 'error'));

						if (_.get(param, 'onComplete') != undefined)
						{
							entityos._util.onComplete(param);
						}
						else
						{
							entityos.invoke('util-end', param);
						}
					});
				}
			}
		});
	}
}