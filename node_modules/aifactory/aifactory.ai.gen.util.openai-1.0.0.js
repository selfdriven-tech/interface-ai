/*
	AI factory; GPT / LLM
	See README.md

    Example 1: Conversation Assistant
    Check conversations that part of and check for messages that have 
    [@genai:{user message}]
    Post a comment.

    In event mind to a particular conversation.guid for now.
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		entityos.add(
		{
			name: 'ai-gen-util-chat',
			code: function (param)
			{
                // https://platform.openai.com
                // https://platform.openai.com/docs/api-reference
                // https://github.com/openai/openai-node/blob/master/examples/demo.ts

				const settings = entityos.get({scope: '_settings'});
                let aiSettings = _.get(param, 'settings');

				let keyPath = _.get(aiSettings, 'service.keypath');

				let apiKey = _.get(settings, keyPath);
                const OpenAI = require("openai");

                const openai = new OpenAI(
                {
                    apiKey: apiKey
                });

				console.log('model:' + aiSettings.model.name)

                async function generateText(param)
                {
                    const completion = await openai.chat.completions.create(
                    {
                        model: param.model,
                        messages:
                        [
                            { role: 'system', content: param.messages.system },
                            { role: 'user', content: param.messages.user }
                        ],
                        max_tokens: 1000,
                        temperature: 0.7
                    });

                    _.set(param, 'messages.response', completion.choices[0]?.message?.content);

                    if (_.get(param, 'onComplete') != undefined)
                    {
                        entityos._util.onComplete(param)
                    }
                    else
                    {
                        entityos.invoke('util-end', param);
                    }
                }

				let messages = _.get(param, 'messages', {});

				if (messages.system == undefined)
				{
					messages.system = _.get(aiSettings, 'ai.defaults.messages.system');
				}

                if (messages == undefined)
                {
                    entityos.invoke('util-end', {error: 'No messages!'});
                }
                else
                {
					generateText(
					{
						messages: messages,
						model: aiSettings.model.name,
						onComplete: param.onComplete
					});
                }
			}
		});
	}
}