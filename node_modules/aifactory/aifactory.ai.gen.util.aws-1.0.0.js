/*
	AI factory | AWS BEDROCK

	//amazon.titan-text-lite-v1:
	{
		"inputText": "Your prompt here",
		"textGenerationConfig": {
			"maxTokenCount": 300,     // max tokens in the response
			"temperature": 0.7,
			"topP": 0.9,
			"stopSequences": ["\n"],  // optional
			"presencePenalty": 0.0,   // optional
			"frequencyPenalty": 0.0   // optional
		}
	}
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		
		// Using Agent SDK
		// Responses API
		// https://platform.openai.com/docs/libraries
		// https://cookbook.openai.com/examples/file_search_responses
		// /DEV.md file in this repo.

		console.log('Loading AWS Factory...')

		entityos.add(
		{
			name: 'util-aws-get-config',
			code: function ()
			{
				const settings = entityos.get({scope: '_settings'});

				let accessID = _.get(settings, 'infrastructure.aws.access.id');
				let accessSecretKey = _.get(settings, 'infrastructure.aws.access.secret');

				if (accessID == 'prompt' || accessSecretKey == 'prompt')
				{
					const prompt = require('prompt-sync')();

					if (accessID == 'prompt')
					{
						const _accessID = prompt('AWS Access ID: ');
						_.set(settings, 'infrastructure.aws.access.id', _accessID);
					}

					if (accessSecretKey == 'prompt')
					{
						const _accessSecretKey = prompt('AWS Access Secret Key: ');
						_.set(settings, 'infrastructure.aws.access.secret', _accessSecretKey);
					}
				}

				process.env.AWS_ACCESS_KEY_ID = _.get(settings, 'infrastructure.aws.access.id');
				process.env.AWS_SECRET_ACCESS_KEY =  _.get(settings, 'infrastructure.aws.access.secret');

				const infrastructureConfig = 
				{
					credentials:
					{
						accessKeyId: _.get(settings, 'infrastructure.aws.access.id'),
						secretAccessKey: _.get(settings, 'infrastructure.aws.access.secret')
					},
					region: 'ap-southeast-2'
				}

				return infrastructureConfig;
			}
		});

		entityos.add(
		{
			name: 'ai-gen-util-service-models',
			code: function ()
			{	
				console.log('AWS Service Models...')

				let commandParams = {}

				const infrastructureConfig = entityos.invoke('util-aws-get-config');
			
				const { BedrockClient, ListFoundationModelsCommand} = require("@aws-sdk/client-bedrock");

				const bedrock = new BedrockClient(infrastructureConfig);

				const command = new ListFoundationModelsCommand(commandParams);

				bedrock.send(command).then(function(response)
					{
						console.table(response.modelSummaries)

						const models = response.modelSummaries;
						
						let responseData =
						{
							models: models
						}

						entityos.invoke('util-end', responseData);
					}
				);
			}
		});

		entityos.add(
		{
			name: 'ai-gen-util-chat',
			notes: 'Model access @ https://ap-southeast-2.console.aws.amazon.com/bedrock/home?region=ap-southeast-2#/modelaccess',
			code: function (param)
			{
				const settings = entityos.get({scope: '_settings'});
				let aiSettings = _.get(param, 'settings');

				const maxTokensDefault = _.get(settings, 'ai.defaults.maxtokens', 1000);
				const temperatureDefault = _.get(settings, 'ai.defaults.temperature', 0.5);

				const maxTokensDefaultService = _.get(aiSettings, 'service.defaults.maxtokens', maxTokensDefault);
				const tempatureDefaultService = _.get(aiSettings, 'service.defaults.temperature', temperatureDefault);
					
				const maxTokens = _.get(param, 'maxTokens', maxTokensDefaultService);
				const temperature = _.get(param, 'temperature', tempatureDefaultService);

				let textGenerationConfig =
				{
					maxTokenCount: maxTokens,
					temperature: temperature
				}

				textGenerationConfig = _.assign(textGenerationConfig, _.get(param.modelSettings))

				let body =
				{
					inputText: _.get(param, 'param.messages.user', 'Hello?'),
					textGenerationConfig: textGenerationConfig
				};

				let commandParams =
				{
					modelId: _.get(param, 'model', 'amazon.titan-text-lite-v1'),
					contentType: "application/json",
					accept: "application/json",
					body: JSON.stringify(body),
				}

				const infrastructureConfig = entityos.invoke('util-aws-get-config');
			
				const { BedrockRuntimeClient, InvokeModelCommand } = require("@aws-sdk/client-bedrock-runtime");

				const bedrockRuntime = new BedrockRuntimeClient(infrastructureConfig);

				const command = new InvokeModelCommand(commandParams);

				bedrockRuntime.send(command)
				.then(function(response)
				{
					const _response = JSON.parse(Buffer.from(response.body).toString("utf-8"));
					//console.table(_response.inputTextTokenCount)
					//console.table(_response.results)

					_.set(param, 'messages.response', _response.results);

					if (_.get(param, 'onComplete') != undefined)
					{
						entityos._util.onComplete(param);
					}
					else
					{
						entityos.invoke('util-end', param);
					}
				})
				.catch(function (responseError)
				{
					console.log(responseError)
					_.set(param, 'messages.response',  '!!: ' + _.get(responseError, 'error.message'));

					if (_.get(param, 'onComplete') != undefined)
					{
						entityos._util.onComplete(param);
					}
					else
					{
						entityos.invoke('util-end', param);
					}
				});
			}
		});
	}
}