/*
	AI factory; GPT / LLM
	See README.md

    Example 1: Conversation Assistant
    Check conversations that part of and check for messages that have 
    [@genai:{user message}]
    Post a comment.

    In event mind to a particular conversation.guid for now.

	References:
	- https://github.com/mistralai/client-js
	- https://docs.mistral.ai/platform/client/
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		entityos.add(
		{
			name: 'ai-gen-util-chat',
			code: function (param)
			{
               	//https://github.com/mistralai/client-js
                
                var event = entityos.get({scope: '_event'});
                var settings = entityos.get({scope: '_settings'});

				if (param.model == undefined)
                {
                    param.model = _.get(event, 'ai.gpt.mistral.model');
                }

                if (param.model == undefined)
                {
                    param.model = _.get(settings, 'ai.gpt.mistral.model');
                }

				if (param.model == undefined)
                {
                    param.model = 'open-mistral-7b';
                }

				event._model = param.model;
				entityos.get({scope: '_event', value: event});

				/*
				curl --location "https://api.mistral.ai/v1/chat/completions" \
					--header 'Content-Type: application/json' \
					--header 'Accept: application/json' \
					--header "Authorization: Bearer $MISTRAL_API_KEY" \
					--data '{
					"model": "mistral-large-latest",
					"messages": [
					{
						"role": "user",
						"content": "What is the best French cheese?"
					}
					]
				}'
				*/

                if (param.messages == undefined)
                {
                    param.messages = event.messages;
                }

                if (param.messages == undefined)
                {
                    entityos.invoke('util-end', {error: 'No messages!'});
                }
                else
                {
                    if (param.messages.user == undefined)
                    {
                        entityos.invoke('util-end', {error: 'No user message (prompt text)'});
                    }
                    else
                    {
						var hostname = _.get(event, 'ai.gpt.mistral.hostname', 'api.mistral.ai');
						var hostpath = _.get(event, 'ai.gpt.mistral.hostpath', '/v1/chat/completions');
						var keyPath = _.get(event, 'ai.gpt.mistral.keypath', 'ai.gpt.mistral.key');
						var apiKey = _.get(settings, keyPath);

						var sendOptions = 
						{
							hostname: hostname,
							path: hostpath,
							headers:
							{
								Authorization: 'Bearer ' + apiKey,
								'Content-Type': 'application/json',
								Accept: 'application/json'
							},
							action: 'POST',
							callback: 'ai-gen-util-chat-mistral-response',
							onComplete: param.onComplete,
							data:
							{
								model: param.model
							}
						}

						if (param.messages.system == undefined)
						{
							param.messages.system = 'You are a learning assistant for a young person'
						}

						sendOptions.data.messages =
						[
							{ role: 'system', content: param.messages.system },
							{ role: 'user', content: param.messages.user }
						]

						entityos._util.send(sendOptions, 'ai-gen-util-chat-mistral-response');
					}
				}
			}
		});

		entityos.add(
		{
			name: 'ai-gen-util-chat-mistral-response',
			code: function (param, response)
			{	
				completion = response.data;
				console.log(completion);

				_.set(param, 'messages.response', completion.choices[0]?.message?.content);

				//entityos.invoke('util-end', param);

				if (_.get(param, 'onComplete') != undefined)
				{
					entityos._util.onComplete(param)
				}
				else
				{
					entityos.invoke('util-end', param);
				}
			}
		});
	}
}