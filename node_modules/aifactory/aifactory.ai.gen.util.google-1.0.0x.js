/*
	AI factory | GOOGLE
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');

module.exports = 
{
	VERSION: '1.0.0',

	init: function (param)
	{
		entityos.add(
		{
			name: 'ai-gen-util-chat',
			code: function (param)
			{
				const settings = entityos.get({scope: '_settings'});
                let aiSettings = _.get(param, 'settings');

				if (aiSettings == undefined)
				{
					aiSettings = entityos.invoke('ai-gen-util-get-settings');
				}

				let messages = _.get(param, 'messages', {});

				if (messages.system == undefined)
				{
					messages.system = _.get(settings, 'ai.defaults.messages.system');
				}

                if (messages == undefined)
                {
                    entityos.invoke('util-end', {error: 'No messages!'});
                }
                else
                {
					let keyPath = _.get(aiSettings, 'service.keypath');
					let apiKey = _.get(settings, keyPath);

					const { GoogleGenerativeAI } = require("@google/generative-ai");

					const googleGenerativeAI = new GoogleGenerativeAI(apiKey);

					console.log('model:' + aiSettings.model.name)
					const model = googleGenerativeAI.getGenerativeModel({ model: aiSettings.model.name });
					//"gemini-pro"

					console.log(messages.system)

					const chat = model.startChat({
						history: [
							{
								role: "user",
								parts: [{ text: messages.system}]
							},
						],
					});

					chat.sendMessage("What is the weather like in Tokyo?")
					.then(function(result)
					{
						//console.log(result.response.text());
						_.set(param, 'messages.response',result.response.text());
						if (_.get(param, 'onComplete') != undefined)
						{
							entityos._util.onComplete(param)
						}
						else
						{
							entityos.invoke('util-end', param);
						}
					})
					.catch(console.error);
                }
			}
		});		
	}
}